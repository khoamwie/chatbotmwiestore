import {
  Ripple
} from "./chunk-JKBYG2MX.js";
import "./chunk-JKI32FIC.js";
import {
  createBaseVNode,
  createCommentVNode,
  createElementBlock,
  mergeProps,
  normalizeClass,
  openBlock,
  resolveDirective,
  toDisplayString,
  withDirectives
} from "./chunk-B7LC2MEY.js";
import "./chunk-TWLJ45QX.js";

// node_modules/primevue/togglebutton/togglebutton.esm.js
var script = {
  name: "ToggleButton",
  emits: ["update:modelValue", "change", "click", "focus", "blur"],
  props: {
    modelValue: Boolean,
    onIcon: String,
    offIcon: String,
    onLabel: {
      type: String,
      default: "Yes"
    },
    offLabel: {
      type: String,
      default: "No"
    },
    iconPos: {
      type: String,
      default: "left"
    },
    disabled: {
      type: Boolean,
      default: false
    },
    tabindex: {
      type: Number,
      default: null
    },
    inputId: {
      type: String,
      default: null
    },
    inputClass: {
      type: String,
      default: null
    },
    inputStyle: {
      type: null,
      default: null
    },
    inputProps: {
      type: null,
      default: null
    },
    "aria-labelledby": {
      type: String,
      default: null
    },
    "aria-label": {
      type: String,
      default: null
    }
  },
  methods: {
    onClick(event) {
      if (!this.disabled) {
        this.$emit("update:modelValue", !this.modelValue);
        this.$emit("change", event);
        this.$emit("click", event);
      }
    },
    onFocus(event) {
      this.$emit("focus", event);
    },
    onBlur(event) {
      this.$emit("blur", event);
    }
  },
  computed: {
    buttonClass() {
      return {
        "p-button p-togglebutton p-component": true,
        "p-button-icon-only": this.hasIcon && !this.hasLabel,
        "p-disabled": this.disabled,
        "p-highlight": this.modelValue === true
      };
    },
    iconClass() {
      return [
        this.modelValue ? this.onIcon : this.offIcon,
        "p-button-icon",
        {
          "p-button-icon-left": this.iconPos === "left" && this.label,
          "p-button-icon-right": this.iconPos === "right" && this.label
        }
      ];
    },
    hasLabel() {
      return this.onLabel && this.onLabel.length > 0 && this.offLabel && this.offLabel.length > 0;
    },
    hasIcon() {
      return this.onIcon && this.onIcon.length > 0 && this.offIcon && this.offIcon.length > 0;
    },
    label() {
      return this.hasLabel ? this.modelValue ? this.onLabel : this.offLabel : "&nbsp;";
    }
  },
  directives: {
    ripple: Ripple
  }
};
var _hoisted_1 = { class: "p-hidden-accessible" };
var _hoisted_2 = ["id", "checked", "value", "aria-labelledby", "aria-label"];
var _hoisted_3 = { class: "p-button-label" };
function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _directive_ripple = resolveDirective("ripple");
  return withDirectives((openBlock(), createElementBlock("div", {
    class: normalizeClass($options.buttonClass),
    onClick: _cache[2] || (_cache[2] = ($event) => $options.onClick($event))
  }, [
    createBaseVNode("span", _hoisted_1, [
      createBaseVNode("input", mergeProps({
        id: $props.inputId,
        type: "checkbox",
        role: "switch",
        class: $props.inputClass,
        style: $props.inputStyle,
        checked: $props.modelValue,
        value: $props.modelValue,
        "aria-labelledby": _ctx.ariaLabelledby,
        "aria-label": _ctx.ariaLabel,
        onFocus: _cache[0] || (_cache[0] = ($event) => $options.onFocus($event)),
        onBlur: _cache[1] || (_cache[1] = ($event) => $options.onBlur($event))
      }, $props.inputProps), null, 16, _hoisted_2)
    ]),
    $options.hasIcon ? (openBlock(), createElementBlock("span", {
      key: 0,
      class: normalizeClass($options.iconClass)
    }, null, 2)) : createCommentVNode("", true),
    createBaseVNode("span", _hoisted_3, toDisplayString($options.label), 1)
  ], 2)), [
    [_directive_ripple]
  ]);
}
script.render = render;

// dep:primevue_togglebutton
var primevue_togglebutton_default = script;
export {
  primevue_togglebutton_default as default
};
//# sourceMappingURL=primevue_togglebutton.js.map
